#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WepApi.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="control_visitas")]
	public partial class VisitasDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertDepartamento(Departamento instance);
    partial void UpdateDepartamento(Departamento instance);
    partial void DeleteDepartamento(Departamento instance);
    partial void InsertVisitante(Visitante instance);
    partial void UpdateVisitante(Visitante instance);
    partial void DeleteVisitante(Visitante instance);
    partial void InsertEmpleado(Empleado instance);
    partial void UpdateEmpleado(Empleado instance);
    partial void DeleteEmpleado(Empleado instance);
    partial void InsertGafete(Gafete instance);
    partial void UpdateGafete(Gafete instance);
    partial void DeleteGafete(Gafete instance);
    #endregion
		
		public VisitasDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["control_visitasConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VisitasDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisitasDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisitasDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VisitasDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Departamento> Departamento
		{
			get
			{
				return this.GetTable<Departamento>();
			}
		}
		
		public System.Data.Linq.Table<Visitante> Visitante
		{
			get
			{
				return this.GetTable<Visitante>();
			}
		}
		
		public System.Data.Linq.Table<Empleado> Empleado
		{
			get
			{
				return this.GetTable<Empleado>();
			}
		}
		
		public System.Data.Linq.Table<Gafete> Gafete
		{
			get
			{
				return this.GetTable<Gafete>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departamento")]
	public partial class Departamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDepartamento;
		
		private string _nombreDep;
		
		private EntitySet<Empleado> _Empleado;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDepartamentoChanging(int value);
    partial void OnidDepartamentoChanged();
    partial void OnnombreDepChanging(string value);
    partial void OnnombreDepChanged();
    #endregion
		
		public Departamento()
		{
			this._Empleado = new EntitySet<Empleado>(new Action<Empleado>(this.attach_Empleado), new Action<Empleado>(this.detach_Empleado));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDepartamento", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDepartamento
		{
			get
			{
				return this._idDepartamento;
			}
			set
			{
				if ((this._idDepartamento != value))
				{
					this.OnidDepartamentoChanging(value);
					this.SendPropertyChanging();
					this._idDepartamento = value;
					this.SendPropertyChanged("idDepartamento");
					this.OnidDepartamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreDep", DbType="VarChar(50)")]
		public string nombreDep
		{
			get
			{
				return this._nombreDep;
			}
			set
			{
				if ((this._nombreDep != value))
				{
					this.OnnombreDepChanging(value);
					this.SendPropertyChanging();
					this._nombreDep = value;
					this.SendPropertyChanged("nombreDep");
					this.OnnombreDepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Empleado", Storage="_Empleado", ThisKey="idDepartamento", OtherKey="idDepartamento")]
		public EntitySet<Empleado> Empleado
		{
			get
			{
				return this._Empleado;
			}
			set
			{
				this._Empleado.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Empleado(Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = this;
		}
		
		private void detach_Empleado(Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visitante")]
	public partial class Visitante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVisita;
		
		private string _nombreVis;
		
		private string _aPaternoVis;
		
		private string _aMaternoVis;
		
		private System.Nullable<System.DateTime> _EntradaVis;
		
		private System.Nullable<System.DateTime> _SalidaVis;
		
		private System.Nullable<int> _idGafete;
		
		private System.Nullable<int> _idEmpleado;
		
		private EntityRef<Empleado> _Empleado;
		
		private EntityRef<Gafete> _Gafete;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVisitaChanging(int value);
    partial void OnidVisitaChanged();
    partial void OnnombreVisChanging(string value);
    partial void OnnombreVisChanged();
    partial void OnaPaternoVisChanging(string value);
    partial void OnaPaternoVisChanged();
    partial void OnaMaternoVisChanging(string value);
    partial void OnaMaternoVisChanged();
    partial void OnEntradaVisChanging(System.Nullable<System.DateTime> value);
    partial void OnEntradaVisChanged();
    partial void OnSalidaVisChanging(System.Nullable<System.DateTime> value);
    partial void OnSalidaVisChanged();
    partial void OnidGafeteChanging(System.Nullable<int> value);
    partial void OnidGafeteChanged();
    partial void OnidEmpleadoChanging(System.Nullable<int> value);
    partial void OnidEmpleadoChanged();
    #endregion
		
		public Visitante()
		{
			this._Empleado = default(EntityRef<Empleado>);
			this._Gafete = default(EntityRef<Gafete>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVisita", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVisita
		{
			get
			{
				return this._idVisita;
			}
			set
			{
				if ((this._idVisita != value))
				{
					this.OnidVisitaChanging(value);
					this.SendPropertyChanging();
					this._idVisita = value;
					this.SendPropertyChanged("idVisita");
					this.OnidVisitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreVis", DbType="VarChar(30)")]
		public string nombreVis
		{
			get
			{
				return this._nombreVis;
			}
			set
			{
				if ((this._nombreVis != value))
				{
					this.OnnombreVisChanging(value);
					this.SendPropertyChanging();
					this._nombreVis = value;
					this.SendPropertyChanged("nombreVis");
					this.OnnombreVisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aPaternoVis", DbType="VarChar(30)")]
		public string aPaternoVis
		{
			get
			{
				return this._aPaternoVis;
			}
			set
			{
				if ((this._aPaternoVis != value))
				{
					this.OnaPaternoVisChanging(value);
					this.SendPropertyChanging();
					this._aPaternoVis = value;
					this.SendPropertyChanged("aPaternoVis");
					this.OnaPaternoVisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aMaternoVis", DbType="VarChar(30)")]
		public string aMaternoVis
		{
			get
			{
				return this._aMaternoVis;
			}
			set
			{
				if ((this._aMaternoVis != value))
				{
					this.OnaMaternoVisChanging(value);
					this.SendPropertyChanging();
					this._aMaternoVis = value;
					this.SendPropertyChanged("aMaternoVis");
					this.OnaMaternoVisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntradaVis", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntradaVis
		{
			get
			{
				return this._EntradaVis;
			}
			set
			{
				if ((this._EntradaVis != value))
				{
					this.OnEntradaVisChanging(value);
					this.SendPropertyChanging();
					this._EntradaVis = value;
					this.SendPropertyChanged("EntradaVis");
					this.OnEntradaVisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalidaVis", DbType="DateTime")]
		public System.Nullable<System.DateTime> SalidaVis
		{
			get
			{
				return this._SalidaVis;
			}
			set
			{
				if ((this._SalidaVis != value))
				{
					this.OnSalidaVisChanging(value);
					this.SendPropertyChanging();
					this._SalidaVis = value;
					this.SendPropertyChanged("SalidaVis");
					this.OnSalidaVisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGafete", DbType="Int")]
		public System.Nullable<int> idGafete
		{
			get
			{
				return this._idGafete;
			}
			set
			{
				if ((this._idGafete != value))
				{
					if (this._Gafete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGafeteChanging(value);
					this.SendPropertyChanging();
					this._idGafete = value;
					this.SendPropertyChanged("idGafete");
					this.OnidGafeteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpleado", DbType="Int")]
		public System.Nullable<int> idEmpleado
		{
			get
			{
				return this._idEmpleado;
			}
			set
			{
				if ((this._idEmpleado != value))
				{
					if (this._Empleado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idEmpleado = value;
					this.SendPropertyChanged("idEmpleado");
					this.OnidEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleado_Visitante", Storage="_Empleado", ThisKey="idEmpleado", OtherKey="idEmpleado", IsForeignKey=true)]
		public Empleado Empleado
		{
			get
			{
				return this._Empleado.Entity;
			}
			set
			{
				Empleado previousValue = this._Empleado.Entity;
				if (((previousValue != value) 
							|| (this._Empleado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empleado.Entity = null;
						previousValue.Visitante.Remove(this);
					}
					this._Empleado.Entity = value;
					if ((value != null))
					{
						value.Visitante.Add(this);
						this._idEmpleado = value.idEmpleado;
					}
					else
					{
						this._idEmpleado = default(Nullable<int>);
					}
					this.SendPropertyChanged("Empleado");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gafete_Visitante", Storage="_Gafete", ThisKey="idGafete", OtherKey="idGafete", IsForeignKey=true)]
		public Gafete Gafete
		{
			get
			{
				return this._Gafete.Entity;
			}
			set
			{
				Gafete previousValue = this._Gafete.Entity;
				if (((previousValue != value) 
							|| (this._Gafete.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gafete.Entity = null;
						previousValue.Visitante.Remove(this);
					}
					this._Gafete.Entity = value;
					if ((value != null))
					{
						value.Visitante.Add(this);
						this._idGafete = value.idGafete;
					}
					else
					{
						this._idGafete = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gafete");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empleado")]
	public partial class Empleado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmpleado;
		
		private string _nombreEmp;
		
		private string _aPaternoEmp;
		
		private System.Nullable<int> _idDepartamento;
		
		private EntitySet<Visitante> _Visitante;
		
		private EntityRef<Departamento> _Departamento;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpleadoChanging(int value);
    partial void OnidEmpleadoChanged();
    partial void OnnombreEmpChanging(string value);
    partial void OnnombreEmpChanged();
    partial void OnaPaternoEmpChanging(string value);
    partial void OnaPaternoEmpChanged();
    partial void OnidDepartamentoChanging(System.Nullable<int> value);
    partial void OnidDepartamentoChanged();
    #endregion
		
		public Empleado()
		{
			this._Visitante = new EntitySet<Visitante>(new Action<Visitante>(this.attach_Visitante), new Action<Visitante>(this.detach_Visitante));
			this._Departamento = default(EntityRef<Departamento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpleado", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmpleado
		{
			get
			{
				return this._idEmpleado;
			}
			set
			{
				if ((this._idEmpleado != value))
				{
					this.OnidEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idEmpleado = value;
					this.SendPropertyChanged("idEmpleado");
					this.OnidEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreEmp", DbType="VarChar(30)")]
		public string nombreEmp
		{
			get
			{
				return this._nombreEmp;
			}
			set
			{
				if ((this._nombreEmp != value))
				{
					this.OnnombreEmpChanging(value);
					this.SendPropertyChanging();
					this._nombreEmp = value;
					this.SendPropertyChanged("nombreEmp");
					this.OnnombreEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aPaternoEmp", DbType="VarChar(30)")]
		public string aPaternoEmp
		{
			get
			{
				return this._aPaternoEmp;
			}
			set
			{
				if ((this._aPaternoEmp != value))
				{
					this.OnaPaternoEmpChanging(value);
					this.SendPropertyChanging();
					this._aPaternoEmp = value;
					this.SendPropertyChanged("aPaternoEmp");
					this.OnaPaternoEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDepartamento", DbType="Int")]
		public System.Nullable<int> idDepartamento
		{
			get
			{
				return this._idDepartamento;
			}
			set
			{
				if ((this._idDepartamento != value))
				{
					if (this._Departamento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDepartamentoChanging(value);
					this.SendPropertyChanging();
					this._idDepartamento = value;
					this.SendPropertyChanged("idDepartamento");
					this.OnidDepartamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleado_Visitante", Storage="_Visitante", ThisKey="idEmpleado", OtherKey="idEmpleado")]
		public EntitySet<Visitante> Visitante
		{
			get
			{
				return this._Visitante;
			}
			set
			{
				this._Visitante.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Empleado", Storage="_Departamento", ThisKey="idDepartamento", OtherKey="idDepartamento", IsForeignKey=true)]
		public Departamento Departamento
		{
			get
			{
				return this._Departamento.Entity;
			}
			set
			{
				Departamento previousValue = this._Departamento.Entity;
				if (((previousValue != value) 
							|| (this._Departamento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departamento.Entity = null;
						previousValue.Empleado.Remove(this);
					}
					this._Departamento.Entity = value;
					if ((value != null))
					{
						value.Empleado.Add(this);
						this._idDepartamento = value.idDepartamento;
					}
					else
					{
						this._idDepartamento = default(Nullable<int>);
					}
					this.SendPropertyChanged("Departamento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visitante(Visitante entity)
		{
			this.SendPropertyChanging();
			entity.Empleado = this;
		}
		
		private void detach_Visitante(Visitante entity)
		{
			this.SendPropertyChanging();
			entity.Empleado = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gafete")]
	public partial class Gafete : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGafete;
		
		private string _nombreGaf;
		
		private System.Nullable<bool> _libre;
		
		private EntitySet<Visitante> _Visitante;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGafeteChanging(int value);
    partial void OnidGafeteChanged();
    partial void OnnombreGafChanging(string value);
    partial void OnnombreGafChanged();
    partial void OnlibreChanging(System.Nullable<bool> value);
    partial void OnlibreChanged();
    #endregion
		
		public Gafete()
		{
			this._Visitante = new EntitySet<Visitante>(new Action<Visitante>(this.attach_Visitante), new Action<Visitante>(this.detach_Visitante));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGafete", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idGafete
		{
			get
			{
				return this._idGafete;
			}
			set
			{
				if ((this._idGafete != value))
				{
					this.OnidGafeteChanging(value);
					this.SendPropertyChanging();
					this._idGafete = value;
					this.SendPropertyChanged("idGafete");
					this.OnidGafeteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreGaf", DbType="VarChar(10)")]
		public string nombreGaf
		{
			get
			{
				return this._nombreGaf;
			}
			set
			{
				if ((this._nombreGaf != value))
				{
					this.OnnombreGafChanging(value);
					this.SendPropertyChanging();
					this._nombreGaf = value;
					this.SendPropertyChanged("nombreGaf");
					this.OnnombreGafChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_libre", DbType="Bit")]
		public System.Nullable<bool> libre
		{
			get
			{
				return this._libre;
			}
			set
			{
				if ((this._libre != value))
				{
					this.OnlibreChanging(value);
					this.SendPropertyChanging();
					this._libre = value;
					this.SendPropertyChanged("libre");
					this.OnlibreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gafete_Visitante", Storage="_Visitante", ThisKey="idGafete", OtherKey="idGafete")]
		public EntitySet<Visitante> Visitante
		{
			get
			{
				return this._Visitante;
			}
			set
			{
				this._Visitante.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visitante(Visitante entity)
		{
			this.SendPropertyChanging();
			entity.Gafete = this;
		}
		
		private void detach_Visitante(Visitante entity)
		{
			this.SendPropertyChanging();
			entity.Gafete = null;
		}
	}
}
#pragma warning restore 1591
